import numpy as np

class Pattern:
    """
    Represents a single piece of art generated by a neural network.
    """

    def __init__(self, neural_network, metadata=None):
        """
        Initializes a pattern with a neural network and optional metadata.

        Args:
            neural_network (NeuralNetwork): The neural network generating the art.
            metadata (dict): Additional information like parents or generation history.
        """
        self.neural_network = neural_network
        self.metadata = metadata if metadata else {}
        self.fitness = 0
        self.generate_pattern()

    def generate_pattern(self):
        input_data = np.random.rand(self.neural_network.input_size)
        output = self.neural_network.forward(input_data)
        output_normalized = (output - np.min(output)) / (np.max(output) - np.min(output) + 1e-7)
        size = int(np.sqrt(len(output_normalized)))
        self.canvas = output_normalized.reshape(size, size)

    def evaluate_fitness(self, fitness_evaluator):
        """
        Evaluates the fitness of the pattern using a FitnessEvaluator.

        Args:
            fitness_evaluator (FitnessEvaluator): The fitness evaluation object.

        Returns:
            None
        """
        self.fitness = fitness_evaluator.evaluate_objective(self)

    def mutate(self, mutation_rate):
        """
        Mutates the underlying neural network to introduce variation.

        Args:
            mutation_rate (float): The rate of mutation.

        Returns:
            None
        """
        self.neural_network.mutate(mutation_rate)

    def __repr__(self):
        """
        Provides a string representation of the pattern.

        Returns:
            str: Description of the pattern.
        """
        return f"Pattern(Fitness: {self.fitness}, Metadata: {self.metadata})"
